{"version":3,"sources":["Redux/initialState.js","utilities/index.js","Redux/reducers/tilesReducer.js","Redux/actions.js","Redux/reducers/emptyFieldsReducer.js","Redux/reducers/scoreReducer.js","Redux/reducers/index.js","Components/Field/index.js","Components/Tile/index.js","Components/TilesField/index.js","Redux/actions/tilesActions.js","Components/StartButton/index.js","Redux/actions/scoreActions.js","Components/Score/index.js","Components/App/index.js","index.js"],"names":["initialState","tiles","emptyFields","xPos","yPos","score","currentScore","bestScore","getRandomInt","min","max","Math","floor","random","tilesReducer","state","action","type","payload","initialTiles","xPosition","yPosition","find","push","tileVal","length","emptyFieldsReducer","scoreReducer","bestScoreValue","currentScoreValue","combineReducers","Field","className","Tile","TilesField","map","tile","key","defaultProps","connect","dispatch","addTile","addTileAction","React","memo","initGame","clearScore","onClick","scoreType","scoreLabel","scoreValue","store","updateScore","updateScoreAction","moveLeft","console","log","moveRight","moveUp","moveDown","useEffect","document","addEventListener","e","keyCode","onSwipedLeft","onSwipedRight","onSwipedUp","onSwipedDown","persistConfig","storage","persistedReducer","persistReducer","reducer","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","purge","ReactDOM","render","loading","getElementById"],"mappings":"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","file":"static/js/main.91b1d215.chunk.js","sourcesContent":["const initialState = {\n  tiles: [],\n  emptyFields: [\n    { xPos: 1, yPos: 1 },\n    { xPos: 1, yPos: 2 },\n    { xPos: 1, yPos: 3 },\n    { xPos: 1, yPos: 4 },\n    { xPos: 2, yPos: 1 },\n    { xPos: 2, yPos: 2 },\n    { xPos: 2, yPos: 3 },\n    { xPos: 2, yPos: 4 },\n    { xPos: 3, yPos: 1 },\n    { xPos: 3, yPos: 2 },\n    { xPos: 3, yPos: 3 },\n    { xPos: 3, yPos: 4 },\n    { xPos: 4, yPos: 1 },\n    { xPos: 4, yPos: 2 },\n    { xPos: 4, yPos: 3 },\n    { xPos: 4, yPos: 4 },\n  ],\n  score: {\n    currentScore: 0,\n    bestScore: 0,\n  },\n};\n\nexport default initialState;\n","export const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const getRandomArrayItem = (array) => array[Math.floor(Math.random() * array.length)];\n","import { ADD_TILE, INIT_GAME } from '../actions';\nimport initialState from '../initialState';\nimport { getRandomInt } from '../../utilities';\n\nconst tilesReducer = (state = initialState.tiles, action) => {\n  switch (action.type) {\n    case ADD_TILE:\n      return [\n        ...state,\n        action.payload,\n      ];\n    case INIT_GAME: {\n      const initialTiles = [];\n\n      while (initialTiles.length < 2) {\n        const xPosition = getRandomInt(1, 4);\n        const yPosition = getRandomInt(1, 4);\n        const tileValue = 2;\n\n        // check initialTiles array for duplicates\n        const duplicate = initialTiles.find(({ xPos, yPos }) => xPos === xPosition && yPos === yPosition);\n\n        if (!duplicate) {\n          initialTiles.push({\n            xPos: xPosition,\n            yPos: yPosition,\n            tileVal: tileValue,\n          });\n        }\n      }\n      return initialTiles;\n    }\n    default:\n      return state;\n  }\n};\n\n\nexport default tilesReducer;\n","// Game actions\nexport const INIT_GAME = 'INIT_GAME';\nexport const UPDATE_EMPTIES = 'UPDATE_EMPTIES';\n\n// Tiles actions\nexport const UPDATE_POSITION = 'UPDATE_POSITION';\nexport const REMOVE_NUMBER = 'REMOVE_NUMBER';\nexport const ADD_TILE = 'ADD_TILE';\n\n// Score actions\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const CLEAR_CURRENT_SCORE = 'CLEAR_CURRENT_SCORE';\n","import { UPDATE_EMPTIES } from '../actions';\nimport initialState from '../initialState';\n\nconst emptyFieldsReducer = (state = initialState.emptyFields, action) => {\n  switch (action.type) {\n    case UPDATE_EMPTIES:\n      return [...state];\n    default:\n      return state;\n  }\n};\n\nexport default emptyFieldsReducer;\n","import { UPDATE_SCORE, CLEAR_CURRENT_SCORE } from '../actions';\nimport initialState from '../initialState';\n\nconst scoreReducer = (state = initialState.score, action) => {\n  switch (action.type) {\n    case UPDATE_SCORE: {\n      let bestScoreValue = state.bestScore;\n      const currentScoreValue = state.currentScore + action.payload;\n      if (!bestScoreValue) {\n        bestScoreValue = action.payload;\n      } else {\n        bestScoreValue = Math.max(\n          currentScoreValue,\n          bestScoreValue,\n        );\n      }\n      return {\n        ...state,\n        currentScore: currentScoreValue,\n        bestScore: bestScoreValue,\n      };\n    }\n    case CLEAR_CURRENT_SCORE:\n      return {\n        ...state,\n        currentScore: initialState.score.currentScore,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default scoreReducer;\n","import { combineReducers } from 'redux';\nimport tilesReducer from './tilesReducer';\nimport emptyFieldsReducer from './emptyFieldsReducer';\nimport scoreReducer from './scoreReducer';\n\nexport default combineReducers({\n  tiles: tilesReducer,\n  emptyFields: emptyFieldsReducer,\n  score: scoreReducer,\n});\n","import React from 'react';\n\n// CSS\nimport './styles.css';\n\nconst Field = () => (\n  <div className=\"grid\">\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n  </div>\n);\n\nexport default Field;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\nconst Tile = ({ tileVal, xPos, yPos }) => <div className={`number number--${tileVal} pos--${xPos}-${yPos}`}>{tileVal}</div>;\n\nTile.propTypes = {\n  tileVal: PropTypes.number.isRequired,\n  xPos: PropTypes.number.isRequired,\n  yPos: PropTypes.number.isRequired,\n};\n\nexport default Tile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\n// redux\nimport { connect } from 'react-redux';\nimport { addTileAction } from '../../Redux/actions/tilesActions';\n\n// Components\nimport Tile from '../Tile';\n\nconst TilesField = ({ tiles }) => (\n  <div className=\"grid numbers\">\n\n    { tiles.map((tile) => <Tile key={`${tile.xPos}-${tile.yPos}`} xPos={tile.xPos} yPos={tile.yPos} tileVal={tile.tileVal} />) }\n\n    {/* map numbers from numbers array from state */}\n    {/*<Tile val={2} xPos={1} yPos={1} />*/}\n    {/*<div className=\"number number--2 pos--1-2\">2</div>*/}\n    {/* <div className='number number--4 pos--1-3'>4</div> */}\n    {/* <div className='number number--4 pos--1-4'>4</div> */}\n    {/*<div className=\"number number--8 pos--2-1\">8</div>*/}\n    {/* <div className='number number--8 pos--2-2'>8</div> */}\n    {/*<div className=\"number number--16 pos--2-3\">16</div>*/}\n    {/*<div className=\"number number--16 pos--2-4\">16</div>*/}\n    {/* <div className='number number--32 pos--3-1'>32</div> */}\n    {/*<div className=\"number number--32 pos--3-2\">32</div>*/}\n    {/*<div className=\"number number--64 pos--3-3\">64</div>*/}\n    {/* <div className=\"number number--64 pos--3-4\">64</div> */}\n    {/* <div className=\"number number--128 pos--4-1\">128</div> */}\n    {/* <div className=\"number number--128 pos--4-2\">128</div> */}\n    {/* <div className=\"number number--256 pos--4-3\">256</div> */}\n    {/* <div className=\"number number--256 pos--4-4\">256</div> */}\n    {/* <div className=\"number number--512 pos--4-3\">512</div> */}\n    {/* <div className=\"number number--512 pos--4-4\">512</div> */}\n    {/*<div className=\"number number--1024 pos--4-3\">1024</div>*/}\n    {/* <div className=\"number number--1024 pos--4-4\">1024</div> */}\n    {/* <div className=\"number number--2048 pos--4-3\">2048</div> */}\n    {/* <div className=\"number number--2048 pos--4-4\">2048</div> */}\n  </div>\n);\n\nTilesField.propTypes = {\n  tiles: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.number)),\n // addTile: PropTypes.func.isRequired,\n};\n\nTilesField.defaultProps = {\n  tiles: [],\n};\n\nconst mapStateToProps = (state) => ({ tiles: state.tiles });\nconst mapDispatchToProps = (dispatch) => ({\n  addTile: (xPos, yPos, tileVal) => dispatch(addTileAction(xPos, yPos, tileVal)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TilesField);\n","import { ADD_TILE, INIT_GAME } from '../actions';\n\nexport const addTileAction = (xPos, yPos, tileVal) => ({\n  type: ADD_TILE,\n  payload: { xPos, yPos, tileVal },\n});\n\nexport const initGameAction = () => ({\n  type: INIT_GAME,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\n// redux\nimport { connect } from 'react-redux';\nimport { clearScoreAction } from '../../Redux/actions/scoreActions';\nimport { initGameAction } from '../../Redux/actions/tilesActions';\n\nconst StartButton = ({ clearScore, initGame }) => <button type=\"button\" className=\"start-button\" onClick={initGame}>Start again</button>;\n\nStartButton.propTypes = {\n  clearScore: PropTypes.func.isRequired,\n  initGame: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ score: state.score });\nconst mapDispatchToProps = (dispatch) => ({\n  initGame: () => dispatch(initGameAction()),\n  clearScore: () => dispatch(clearScoreAction()),\n});\n\nexport default React.memo(connect(mapStateToProps, mapDispatchToProps)(StartButton));\n","import { UPDATE_SCORE, CLEAR_CURRENT_SCORE } from '../actions';\n\nexport const updateScoreAction = (currentScore) => ({\n  type: UPDATE_SCORE,\n  payload: currentScore,\n});\n\nexport const clearScoreAction = () => ({\n  type: CLEAR_CURRENT_SCORE,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\n// redux\nimport { connect } from 'react-redux';\n\nconst Score = ({ score, scoreType }) => {\n  const scoreLabel = scoreType === 'current' ? 'Your score' : 'Best score';\n  const scoreValue = scoreType === 'current' ? score.currentScore : score.bestScore;\n\n  return (\n    <div className=\"score\">\n      <span className=\"score__label\">{scoreLabel}</span>\n      <span className=\"score__value\">{scoreValue}</span>\n    </div>\n  );\n};\n\nScore.propTypes = {\n  score: PropTypes.objectOf(PropTypes.number).isRequired,\n  scoreType: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ score: state.score });\n\nexport default React.memo(connect(mapStateToProps)(Score));\n","import React, { useEffect } from 'react';\nimport { Swipeable } from 'react-swipeable';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\n// components\nimport { connect } from 'react-redux';\nimport Field from '../Field';\nimport TilesField from '../TilesField';\nimport StartButton from '../StartButton';\nimport Score from '../Score';\nimport { updateScoreAction } from '../../Redux/actions/scoreActions';\n\nconst App = ({ updateScore }) => {\n  const moveLeft = () => {\n    updateScore(10);\n    console.log('LEFT');\n  };\n\n  const moveRight = () => {\n    console.log('RIGHT');\n  };\n\n  const moveUp = () => {\n    console.log('UP');\n  };\n\n  const moveDown = () => {\n    console.log('DOWN');\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', (e) => {\n      switch (e.keyCode) {\n        case 37:\n          moveLeft();\n          break;\n        case 38:\n          moveUp();\n          break;\n        case 39:\n          moveRight();\n          break;\n        case 40:\n          moveDown();\n          break;\n        default:\n      }\n    });\n  }, []);\n\n  return (\n    <Swipeable\n      onSwipedLeft={moveLeft}\n      onSwipedRight={moveRight}\n      onSwipedUp={moveUp}\n      onSwipedDown={moveDown}\n      className=\"wrap\"\n    >\n      <h1 className=\"game-header\">2048</h1>\n      <p className=\"game-description\">Use Up, Down, Left, Right keys or swipe to play</p>\n      <StartButton />\n      <div className=\"score-wrap\">\n        <Score scoreType=\"current\" />\n        <Score scoreType=\"best\" />\n      </div>\n      <div className=\"game__container\">\n        <Field />\n        <TilesField />\n      </div>\n    </Swipeable>\n  );\n};\n\nApp.propTypes = {\n  updateScore: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ score: state.store });\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateScore:\n    (currentScore) => dispatch(updateScoreAction(currentScore)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// CSS\nimport './css/variables.css';\nimport './css/common.css';\n\n// redux\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\n// redux-persist\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport reducer from './Redux/reducers';\n\nimport App from './Components/App';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\nconst store = createStore(\n  persistedReducer,\n  // eslint-disable-next-line no-underscore-dangle\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nconst persistor = persistStore(store);\n\npersistor.purge(); // CLEAR redux-persist cache\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor} loading={null}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}