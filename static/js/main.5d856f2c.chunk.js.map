{"version":3,"sources":["Redux/initialState.js","utilities/index.js","Redux/reducers/tilesReducer.js","Redux/actions.js","Redux/reducers/emptyFieldsReducer.js","Redux/reducers/scoreReducer.js","Redux/reducers/gameReducer.js","Redux/reducers/index.js","Components/Field/index.js","Redux/actions/emptiesAction.js","Redux/actions/gameActions.js","Redux/actions/scoreActions.js","Redux/actions/tilesActions.js","Components/Tile/index.js","Components/TilesField/index.js","Components/StartButton/index.js","Components/Score/index.js","Components/FinishGame/index.js","Components/App/index.js","index.js"],"names":["initialState","tiles","emptyFields","rowPos","colPos","isEmpty","score","currentScore","bestScore","gameStatus","getRandomInt","min","max","Math","floor","random","getRandomArrayItem","array","length","updateLocalEmpties","oldTile","newTile","map","item","tilesReducer","state","action","type","payload","filter","randomEmpty","tileVal","initialTiles","rowPosition","colPosition","find","push","sortedTiles","direction","sort","a","b","updatedTiles","tile","currentRow","currentCol","prevCell","i","nextCell","reduce","cell","emptyFieldsReducer","updatedEmpties","scoreReducer","bestScoreValue","currentScoreValue","combineReducers","gameReducer","Field","className","updateEmptiesAction","initGameThunkAction","dispatch","getState","initTilesAction","Tile","TilesField","key","defaultProps","connect","addTile","StartButton","initGame","children","onClick","React","memo","undefined","scoreType","scoreLabel","scoreValue","updateTilesPosition","updateTilesPositionAction","updateTilesPositionAThunk","moveLeft","moveRight","moveUp","moveDown","useEffect","document","addEventListener","e","keyCode","onSwipedLeft","onSwipedRight","onSwipedUp","onSwipedDown","persistConfig","storage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","compose","persistedReducer","persistReducer","reducer","store","createStore","applyMiddleware","thunkMiddleware","persistor","persistStore","purge","ReactDOM","render","loading","getElementById"],"mappings":"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","file":"static/js/main.5d856f2c.chunk.js","sourcesContent":["const initialState = {\n  tiles: [],\n  emptyFields: [\n    { rowPos: 1, colPos: 1, isEmpty: true },\n    { rowPos: 1, colPos: 2, isEmpty: true },\n    { rowPos: 1, colPos: 3, isEmpty: true },\n    { rowPos: 1, colPos: 4, isEmpty: true },\n    { rowPos: 2, colPos: 1, isEmpty: true },\n    { rowPos: 2, colPos: 2, isEmpty: true },\n    { rowPos: 2, colPos: 3, isEmpty: true },\n    { rowPos: 2, colPos: 4, isEmpty: true },\n    { rowPos: 3, colPos: 1, isEmpty: true },\n    { rowPos: 3, colPos: 2, isEmpty: true },\n    { rowPos: 3, colPos: 3, isEmpty: true },\n    { rowPos: 3, colPos: 4, isEmpty: true },\n    { rowPos: 4, colPos: 1, isEmpty: true },\n    { rowPos: 4, colPos: 2, isEmpty: true },\n    { rowPos: 4, colPos: 3, isEmpty: true },\n    { rowPos: 4, colPos: 4, isEmpty: true },\n  ],\n  score: {\n    currentScore: 0,\n    bestScore: 0,\n  },\n  gameStatus: false,\n};\n\nexport default initialState;\n","export const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const getRandomArrayItem = (array) => array[Math.floor(Math.random() * array.length)];\n\nexport const updateLocalEmpties = (emptyFields, oldTile, newTile) => {\n  return emptyFields.map((item) => {\n    if (item.colPos === oldTile.colPos && item.rowPos === oldTile.rowPos) {\n      return {\n        ...item,\n        isEmpty: true,\n      };\n    }\n    if (item.colPos === newTile.colPos && item.rowPos === newTile.rowPos) {\n      return {\n        ...item,\n        isEmpty: false,\n      };\n    }\n    return item;\n  });\n};\n","import { ADD_TILE, ADD_RANDOM_TILE, INIT_FIRST_TILES, UPDATE_POSITION } from '../actions';\nimport initialState from '../initialState';\nimport { getRandomInt, updateLocalEmpties, getRandomArrayItem } from '../../utilities';\n\nconst tilesReducer = (state = initialState.tiles, action) => {\n  switch (action.type) {\n    case ADD_RANDOM_TILE: {\n      const emptyFields = action.payload.filter(({ isEmpty }) => isEmpty === true);\n      const randomEmpty = getRandomArrayItem(emptyFields);\n      if (randomEmpty) {\n        return [\n          ...state,\n          {\n            rowPos: randomEmpty.rowPos,\n            colPos: randomEmpty.colPos,\n            tileVal: getRandomArrayItem([2, 4]),\n          },\n        ];\n      }\n      return state;\n    }\n    case ADD_TILE:\n      return state;\n    case INIT_FIRST_TILES: {\n      const initialTiles = [];\n\n      while (initialTiles.length < 2) {\n        const rowPosition = getRandomInt(1, 4);\n        const colPosition = getRandomInt(1, 4);\n        const tileValue = 2;\n\n        const duplicate = initialTiles.find(\n          ({ rowPos, colPos }) => rowPos === rowPosition && colPos === colPosition,\n        );\n\n        if (!duplicate) {\n          initialTiles.push({\n            rowPos: rowPosition,\n            colPos: colPosition,\n            tileVal: tileValue,\n          });\n        }\n      }\n      return initialTiles;\n    }\n    case UPDATE_POSITION: {\n      let sortedTiles = [];\n\n      if (action.payload.direction === 'left' || action.payload.direction === 'up') {\n        sortedTiles = state.sort((a, b) => {\n          if (a.rowPos !== b.rowPos) return a.rowPos - b.rowPos;\n          return a.colPos - b.colPos;\n        });\n      }\n\n      if (action.payload.direction === 'right') {\n        sortedTiles = state.sort((a, b) => {\n          if (a.rowPos !== b.rowPos) return a.rowPos - b.rowPos;\n          return b.colPos - a.colPos;\n        });\n      }\n\n      if (action.payload.direction === 'down') {\n        sortedTiles = state.sort((a, b) => {\n          if (a.rowPos !== b.rowPos) return b.rowPos - a.rowPos;\n          return a.colPos - b.colPos;\n        });\n      }\n\n      let { emptyFields } = action.payload;\n\n      const updatedTiles = sortedTiles.map((tile) => {\n        const currentRow = emptyFields.filter(\n          ({ rowPos }) => rowPos === tile.rowPos,\n        );\n        const currentCol = emptyFields.filter(\n          ({ colPos }) => colPos === tile.colPos,\n        );\n        switch (action.payload.direction) {\n          case 'left': {\n            let prevCell = tile.colPos;\n            // -1 for the prev cell and -1 for the array iterator\n            let i = prevCell - 2 < 0 ? 0 : prevCell - 2;\n            for (i; i >= 0; i -= 1) {\n              if (currentRow[i].colPos !== tile.colPos && currentRow[i].isEmpty) {\n                prevCell = currentRow[i].colPos;\n              } else {\n                break;\n              }\n            }\n            if (prevCell && prevCell !== tile.colPos) {\n              emptyFields = updateLocalEmpties(\n                emptyFields, tile,{ rowPos: tile.rowPos, colPos: prevCell },\n              );\n              return {\n                ...tile,\n                colPos: prevCell,\n              };\n            }\n            return tile;\n          }\n          case 'right': {\n            let nextCell = tile.colPos;\n            let i = nextCell; // next cell\n            for (i; i < 4; i += 1) {\n              if (currentRow[i].colPos !== tile.colPos && currentRow[i].isEmpty) {\n                nextCell = currentRow[i].colPos;\n              } else {\n                break;\n              }\n            }\n            if (nextCell && nextCell !== tile.colPos) {\n              emptyFields = updateLocalEmpties(\n                emptyFields, tile, { rowPos: tile.rowPos, colPos: nextCell },\n              );\n              return {\n                ...tile,\n                colPos: nextCell,\n              };\n            }\n            return tile;\n          }\n          case 'up': {\n            let prevCell = tile.rowPos;\n            // -1 for the prev cell and -1 for the array iterator\n            let i = prevCell - 2 < 0 ? 0 : prevCell - 2;\n            for (i; i >= 0; i -= 1) {\n              if (currentCol[i].rowPos !== tile.rowPos && currentCol[i].isEmpty) {\n                prevCell = currentCol[i].rowPos;\n              } else {\n                break;\n              }\n            }\n            if (prevCell && prevCell !== tile.rowPos) {\n              // const prevTileIndex = prevCell - 2 < 0 ? 0 : prevCell - 2;\n              // const prevTile = state.find(({ rowPos, colPos }) => (\n              //   currentCol[prevTileIndex].rowPos === rowPos\n              //   && currentCol[prevTileIndex].colPos === colPos\n              // ));\n              //\n              // if (prevTile && prevTile.tileVal === tile.tileVal) console.log('EQUALS');\n\n              emptyFields = updateLocalEmpties(\n                emptyFields, tile, { rowPos: prevCell, colPos: tile.colPos },\n              );\n              return {\n                ...tile,\n                rowPos: prevCell,\n              };\n            }\n            return tile;\n          }\n          case 'down': {\n            const nextCell = currentCol.reduce((max, cell) => {\n              if (cell.isEmpty) return cell.rowPos < max ? max : cell.rowPos;\n              return max;\n            }, tile.rowPos);\n            if (nextCell && nextCell !== tile.rowPos) {\n              emptyFields = updateLocalEmpties(\n                emptyFields, tile, { rowPos: nextCell, colPos: tile.colPos },\n              );\n              return {\n                ...tile,\n                rowPos: nextCell,\n              };\n            }\n            return tile;\n          }\n          default:\n            return tile;\n        }\n      });\n\n      return updatedTiles;\n    }\n    default:\n      return state;\n  }\n};\n\n\nexport default tilesReducer;\n","// Game actions\nexport const INIT_GAME = 'INIT_GAME';\nexport const FINISH_GAME = 'FINISH_GAME';\n\n// Empties actions\nexport const UPDATE_EMPTIES = 'UPDATE_EMPTIES';\nexport const INIT_EMPTIES = 'INIT_EMPTIES';\n\n// Tiles actions\nexport const UPDATE_POSITION = 'UPDATE_POSITION';\nexport const REMOVE_NUMBER = 'REMOVE_NUMBER';\nexport const ADD_TILE = 'ADD_TILE';\nexport const ADD_RANDOM_TILE = 'ADD_RANDOM_TILE';\nexport const INIT_FIRST_TILES = 'INIT_FIRST_TILES';\n\n// Score actions\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const CLEAR_CURRENT_SCORE = 'CLEAR_CURRENT_SCORE';\n","import { UPDATE_EMPTIES, INIT_EMPTIES } from '../actions';\nimport initialState from '../initialState';\n\nconst emptyFieldsReducer = (state = initialState.emptyFields, action) => {\n  switch (action.type) {\n    case UPDATE_EMPTIES: {\n      const tiles = action.payload;\n      const updatedEmpties = state.map((item) => {\n        const tile = tiles.find(({ rowPos, colPos }) => rowPos === item.rowPos && colPos === item.colPos);\n        if (tile) return { ...item, isEmpty: false };\n        return {\n          ...item,\n          isEmpty: true,\n        };\n      });\n      return updatedEmpties;\n    }\n    case INIT_EMPTIES:\n      return initialState.emptyFields;\n    default:\n      return state;\n  }\n};\n\nexport default emptyFieldsReducer;\n","import { UPDATE_SCORE, CLEAR_CURRENT_SCORE } from '../actions';\nimport initialState from '../initialState';\n\nconst scoreReducer = (state = initialState.score, action) => {\n  switch (action.type) {\n    case UPDATE_SCORE: {\n      let bestScoreValue = state.bestScore;\n      const currentScoreValue = state.currentScore + action.payload;\n      if (!bestScoreValue) {\n        bestScoreValue = action.payload;\n      } else {\n        bestScoreValue = Math.max(\n          currentScoreValue,\n          bestScoreValue,\n        );\n      }\n      return {\n        ...state,\n        currentScore: currentScoreValue,\n        bestScore: bestScoreValue,\n      };\n    }\n    case CLEAR_CURRENT_SCORE:\n      return {\n        ...state,\n        currentScore: initialState.score.currentScore,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default scoreReducer;\n","import { INIT_GAME, FINISH_GAME } from '../actions';\nimport initialState from '../initialState';\n\nconst emptyFieldsReducer = (state = initialState.gameStatus, action) => {\n  switch (action.type) {\n    case INIT_GAME:\n      return true;\n    case FINISH_GAME:\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport default emptyFieldsReducer;\n","import { combineReducers } from 'redux';\nimport tilesReducer from './tilesReducer';\nimport emptyFieldsReducer from './emptyFieldsReducer';\nimport scoreReducer from './scoreReducer';\nimport gameReducer from './gameReducer';\n\nexport default combineReducers({\n  tiles: tilesReducer,\n  emptyFields: emptyFieldsReducer,\n  score: scoreReducer,\n  gameStatus: gameReducer,\n});\n","import React from 'react';\n\n// CSS\nimport './styles.css';\n\nconst Field = () => (\n  <div className=\"grid\">\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n  </div>\n);\n\nexport default Field;\n","import { INIT_EMPTIES, UPDATE_EMPTIES } from '../actions';\n\nexport const initEmptiesAction = () => ({ type: INIT_EMPTIES });\nexport const updateEmptiesAction = (tiles) => ({ type: UPDATE_EMPTIES, payload: tiles });\n","import { INIT_GAME, FINISH_GAME } from '../actions';\nimport { initTilesAction } from './tilesActions';\nimport { clearScoreAction } from './scoreActions';\nimport { updateEmptiesAction, initEmptiesAction } from './emptiesAction';\n\nconst initGameAction = () => ({ type: INIT_GAME });\n\nexport const initGameThunkAction = () => (dispatch, getState) => {\n  dispatch(initGameAction());\n  dispatch(clearScoreAction());\n  dispatch(initEmptiesAction());\n  dispatch(initTilesAction());\n  dispatch(updateEmptiesAction(getState().tiles));\n};\n\nexport const finishGameAction = () => ({ type: FINISH_GAME });\n","import { UPDATE_SCORE, CLEAR_CURRENT_SCORE } from '../actions';\n\nexport const updateScoreAction = (currentScore) => ({\n  type: UPDATE_SCORE,\n  payload: currentScore,\n});\n\nexport const clearScoreAction = () => ({\n  type: CLEAR_CURRENT_SCORE,\n});\n","import {\n  ADD_RANDOM_TILE, ADD_TILE, INIT_FIRST_TILES,\n  UPDATE_POSITION,\n} from '../actions';\nimport { updateEmptiesAction } from './emptiesAction';\nimport { finishGameAction } from './gameActions';\n\nexport const addTileAction = () => ({ type: ADD_TILE });\n\nexport const initTilesAction = () => ({\n  type: INIT_FIRST_TILES,\n});\n\nconst addRandomTileAction = (empryFields) => ({\n  type: ADD_RANDOM_TILE,\n  payload: empryFields\n});\n\nconst updateTilesPositionAction = (direction, emptyFields) => ({\n  type: UPDATE_POSITION,\n  payload: {\n    direction,\n    emptyFields,\n  },\n});\n\nexport const updateTilesPositionAThunk = (direction) => (dispatch, getState) => {\n  dispatch(updateTilesPositionAction(direction, getState().emptyFields));\n  dispatch(updateEmptiesAction(getState().tiles));\n  dispatch(addRandomTileAction(getState().emptyFields));\n  dispatch(updateEmptiesAction(getState().tiles));\n  // check game status\n  const freeEmpties = getState().emptyFields.filter(({ isEmpty }) => isEmpty);\n  if (!freeEmpties.length) {\n    dispatch(finishGameAction());\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\nconst Tile = ({ tileVal, rowPos, colPos }) => <div className={`number number--${tileVal} pos--${rowPos}-${colPos}`}>{tileVal}</div>;\n\nTile.propTypes = {\n  tileVal: PropTypes.number.isRequired,\n  rowPos: PropTypes.number.isRequired,\n  colPos: PropTypes.number.isRequired,\n};\n\nexport default Tile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\n// redux\nimport { connect } from 'react-redux';\nimport { addTileAction } from '../../Redux/actions/tilesActions';\n\n// Components\nimport Tile from '../Tile';\n\nconst TilesField = ({ tiles }) => (\n  <div className=\"grid numbers\">\n    { tiles.map((tile) => <Tile key={`${tile.rowPos}-${tile.colPos}`} rowPos={tile.rowPos} colPos={tile.colPos} tileVal={tile.tileVal} />) }\n  </div>\n);\n\nTilesField.propTypes = {\n  tiles: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.number)),\n};\n\nTilesField.defaultProps = {\n  tiles: [],\n};\n\nconst mapStateToProps = (state) => ({ tiles: state.tiles });\nconst mapDispatchToProps = (dispatch) => ({\n  addTile: (rowPos, colPos, tileVal) => dispatch(addTileAction(rowPos, colPos, tileVal)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TilesField);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\n// redux\nimport { connect } from 'react-redux';\nimport { initGameThunkAction } from '../../Redux/actions/gameActions';\n\nconst StartButton = ({ initGame, children }) => <button type=\"button\" className=\"start-button\" onClick={initGame}>{ children }</button>;\n\nStartButton.propTypes = {\n  initGame: PropTypes.func.isRequired,\n  children: PropTypes.string,\n};\n\nStartButton.defaultProps = {\n  children: 'Start again',\n};\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  initGame: () => dispatch(initGameThunkAction()),\n});\n\nexport default React.memo(connect(undefined, mapDispatchToProps)(StartButton));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\n// redux\nimport { connect } from 'react-redux';\n\nconst Score = ({ score, scoreType }) => {\n  const scoreLabel = scoreType === 'current' ? 'Your score' : 'Best score';\n  const scoreValue = scoreType === 'current' ? score.currentScore : score.bestScore;\n\n  return (\n    <div className=\"score\">\n      <span className=\"score__label\">{scoreLabel}</span>\n      <span className=\"score__value\">{scoreValue}</span>\n    </div>\n  );\n};\n\nScore.propTypes = {\n  score: PropTypes.objectOf(PropTypes.number).isRequired,\n  scoreType: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ score: state.score });\n\nexport default React.memo(connect(mapStateToProps)(Score));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\n// redux\nimport { connect } from 'react-redux';\nimport StartButton from '../StartButton';\n\nconst FinishGame = () => {\n  return (\n    <div className=\"game-status\">\n      END GAME\n      <StartButton>Restart</StartButton>\n    </div>\n  );\n};\n\nFinishGame.propTypes = {\n  gameStatus: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ gameStatus: state.gameStatus });\n\nexport default React.memo(connect(mapStateToProps)(FinishGame));\n","import React, { useEffect } from 'react';\nimport { Swipeable } from 'react-swipeable';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\n// components\nimport { connect } from 'react-redux';\nimport Field from '../Field';\nimport TilesField from '../TilesField';\nimport StartButton from '../StartButton';\nimport Score from '../Score';\n\n// Actions\nimport { initGameThunkAction } from '../../Redux/actions/gameActions';\nimport { updateTilesPositionAThunk } from '../../Redux/actions/tilesActions';\nimport FinishGame from '../FinishGame';\n\n// const App = ({ /*tiles, updateTilePosition*/ }) => {\nconst App = ({ initGame, updateTilesPosition, gameStatus }) => {\n  const moveLeft = () => {\n    updateTilesPosition('left');\n  };\n\n  const moveRight = () => {\n    updateTilesPosition('right');\n  };\n\n  const moveUp = () => {\n    updateTilesPosition('up');\n  };\n\n  const moveDown = () => {\n    updateTilesPosition('down');\n  };\n\n  useEffect(() => {\n    initGame();\n\n    document.addEventListener('keydown', (e) => {\n      switch (e.keyCode) {\n        case 37:\n          moveLeft();\n          break;\n        case 38:\n          moveUp();\n          break;\n        case 39:\n          moveRight();\n          break;\n        case 40:\n          moveDown();\n          break;\n        default:\n      }\n    });\n  }, []);\n\n  return (\n    <Swipeable\n      onSwipedLeft={moveLeft}\n      onSwipedRight={moveRight}\n      onSwipedUp={moveUp}\n      onSwipedDown={moveDown}\n      className=\"wrap\"\n    >\n      <h1 className=\"game-header\">2048</h1>\n      <p className=\"game-description\">Use Up, Down, Left, Right keys or swipe to play</p>\n      <StartButton />\n      <div className=\"score-wrap\">\n        <Score scoreType=\"current\" />\n        <Score scoreType=\"best\" />\n      </div>\n      <div className=\"game__container\">\n        <Field />\n        <TilesField />\n        { !gameStatus ? <FinishGame /> : null }\n      </div>\n    </Swipeable>\n  );\n};\n\nApp.propTypes = {\n  gameStatus: PropTypes.bool.isRequired,\n  initGame: PropTypes.func.isRequired,\n  updateTilesPosition: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ tiles: state.tiles, gameStatus: state.gameStatus });\n\nconst mapDispatchToProps = (dispatch) => ({\n  initGame:\n    () => dispatch(initGameThunkAction()),\n  updateTilesPosition: (direction) => dispatch(updateTilesPositionAThunk(direction)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// CSS\nimport './css/variables.css';\nimport './css/common.css';\n\n// redux\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\n\n// redux-persist\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport reducer from './Redux/reducers';\n\nimport App from './Components/App';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nconst composeEnhancers = (\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n  && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ trace: true, traceLimit: 25 })\n) || compose;\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\nconst store = createStore(\n  persistedReducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware)),\n);\n\nconst persistor = persistStore(store);\n\npersistor.purge(); // CLEAR redux-persist cache\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor} loading={null}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}