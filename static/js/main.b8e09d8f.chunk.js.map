{"version":3,"sources":["Redux/initialState.js","utilities/index.js","Redux/reducers/tilesReducer.js","Redux/actions.js","Redux/reducers/emptyFieldsReducer.js","Redux/reducers/scoreReducer.js","Redux/reducers/gameReducer.js","Redux/reducers/index.js","Components/Field/index.js","Redux/actions/emptiesAction.js","Components/Tile/index.js","Components/TilesField/index.js","Redux/actions/tilesActions.js","Redux/actions/gameActions.js","Redux/actions/scoreActions.js","Components/StartButton/index.js","Components/Score/index.js","Components/App/index.js","index.js"],"names":["initialState","tiles","emptyFields","rowPos","colPos","isEmpty","score","currentScore","bestScore","gameStatus","getRandomInt","min","max","Math","floor","random","updateLocalEmpties","oldTile","newTile","map","item","tilesReducer","state","action","type","payload","initialTiles","rowPosition","colPosition","find","push","tileVal","length","sortedTiles","direction","sort","a","b","updatedTiles","tile","currentRow","filter","currentCol","prevCell","i","nextCell","reduce","cell","emptyFieldsReducer","updatedEmpties","scoreReducer","bestScoreValue","currentScoreValue","combineReducers","gameReducer","Field","className","updateEmptiesAction","Tile","TilesField","key","defaultProps","connect","dispatch","addTile","initGameThunkAction","getState","React","memo","undefined","initGame","onClick","scoreType","scoreLabel","scoreValue","updateTilesPosition","updateTilesPositionAction","updateTilesPositionAThunk","moveLeft","moveRight","moveUp","moveDown","useEffect","document","addEventListener","e","keyCode","onSwipedLeft","onSwipedRight","onSwipedUp","onSwipedDown","persistConfig","storage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","compose","persistedReducer","persistReducer","reducer","store","createStore","applyMiddleware","thunkMiddleware","persistor","persistStore","purge","ReactDOM","render","loading","getElementById"],"mappings":"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","file":"static/js/main.b8e09d8f.chunk.js","sourcesContent":["const initialState = {\n  tiles: [],\n  emptyFields: [\n    { rowPos: 1, colPos: 1, isEmpty: true },\n    { rowPos: 1, colPos: 2, isEmpty: true },\n    { rowPos: 1, colPos: 3, isEmpty: true },\n    { rowPos: 1, colPos: 4, isEmpty: true },\n    { rowPos: 2, colPos: 1, isEmpty: true },\n    { rowPos: 2, colPos: 2, isEmpty: true },\n    { rowPos: 2, colPos: 3, isEmpty: true },\n    { rowPos: 2, colPos: 4, isEmpty: true },\n    { rowPos: 3, colPos: 1, isEmpty: true },\n    { rowPos: 3, colPos: 2, isEmpty: true },\n    { rowPos: 3, colPos: 3, isEmpty: true },\n    { rowPos: 3, colPos: 4, isEmpty: true },\n    { rowPos: 4, colPos: 1, isEmpty: true },\n    { rowPos: 4, colPos: 2, isEmpty: true },\n    { rowPos: 4, colPos: 3, isEmpty: true },\n    { rowPos: 4, colPos: 4, isEmpty: true },\n  ],\n  score: {\n    currentScore: 0,\n    bestScore: 0,\n  },\n  gameStatus: false,\n};\n\nexport default initialState;\n","export const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\nexport const getRandomArrayItem = (array) => array[Math.floor(Math.random() * array.length)];\n\nexport const updateLocalEmpties = (emptyFields, oldTile, newTile) => {\n  return emptyFields.map((item) => {\n    if (item.colPos === oldTile.colPos && item.rowPos === oldTile.rowPos) {\n      return {\n        ...item,\n        isEmpty: true,\n      };\n    }\n    if (item.colPos === newTile.colPos && item.rowPos === newTile.rowPos) {\n      return {\n        ...item,\n        isEmpty: false,\n      };\n    }\n    return item;\n  });\n};\n","import { ADD_TILE, INIT_FIRST_TILES, UPDATE_POSITION } from '../actions';\nimport initialState from '../initialState';\nimport { getRandomInt, updateLocalEmpties } from '../../utilities';\n\nconst tilesReducer = (state = initialState.tiles, action) => {\n  switch (action.type) {\n    case ADD_TILE:\n      return [\n        ...state,\n        action.payload,\n      ];\n    case INIT_FIRST_TILES: {\n      const initialTiles = [];\n\n      while (initialTiles.length < 2) {\n        const rowPosition = getRandomInt(1, 4);\n        const colPosition = getRandomInt(1, 4);\n        const tileValue = 2;\n\n        const duplicate = initialTiles.find(\n          ({ rowPos, colPos }) => rowPos === rowPosition && colPos === colPosition,\n        );\n\n        if (!duplicate) {\n          initialTiles.push({\n            rowPos: rowPosition,\n            colPos: colPosition,\n            tileVal: tileValue,\n          });\n        }\n      }\n      return initialTiles;\n    }\n    case UPDATE_POSITION: {\n      let sortedTiles = [];\n\n      if (action.payload.direction === 'left' || action.payload.direction === 'up') {\n        sortedTiles = state.sort((a, b) => {\n          if (a.rowPos !== b.rowPos) return a.rowPos - b.rowPos;\n          return a.colPos - b.colPos;\n        });\n      }\n\n      if (action.payload.direction === 'right') {\n        sortedTiles = state.sort((a, b) => {\n          if (a.rowPos !== b.rowPos) return a.rowPos - b.rowPos;\n          return b.colPos - a.colPos;\n        });\n      }\n\n      if (action.payload.direction === 'down') {\n        sortedTiles = state.sort((a, b) => {\n          if (a.rowPos !== b.rowPos) return b.rowPos - a.rowPos;\n          return a.colPos - b.colPos;\n        });\n      }\n\n      let { emptyFields } = action.payload;\n\n      const updatedTiles = sortedTiles.map((tile) => {\n        const currentRow = emptyFields.filter(\n          ({ rowPos }) => rowPos === tile.rowPos,\n        );\n        const currentCol = emptyFields.filter(\n          ({ colPos }) => colPos === tile.colPos,\n        );\n        switch (action.payload.direction) {\n          case 'left': {\n            let prevCell = tile.colPos;\n            // -1 for the prev cell and -1 for the array iterator\n            let i = prevCell - 2 < 0 ? 0 : prevCell - 2;\n            for (i; i >= 0; i -= 1) {\n              if (currentRow[i].colPos !== tile.colPos && currentRow[i].isEmpty) {\n                prevCell = currentRow[i].colPos;\n              } else {\n                break;\n              }\n            }\n            if (prevCell && prevCell !== tile.colPos) {\n              emptyFields = updateLocalEmpties(\n                emptyFields, tile,{ rowPos: tile.rowPos, colPos: prevCell },\n              );\n              return {\n                ...tile,\n                colPos: prevCell,\n              };\n            }\n            return tile;\n          }\n          case 'right': {\n            let nextCell = tile.colPos;\n            let i = nextCell; // next cell\n            for (i; i < 4; i += 1) {\n              if (currentRow[i].colPos !== tile.colPos && currentRow[i].isEmpty) {\n                nextCell = currentRow[i].colPos;\n              } else {\n                break;\n              }\n            }\n            if (nextCell && nextCell !== tile.colPos) {\n              emptyFields = updateLocalEmpties(\n                emptyFields, tile, { rowPos: tile.rowPos, colPos: nextCell },\n              );\n              return {\n                ...tile,\n                colPos: nextCell,\n              };\n            }\n            return tile;\n          }\n          case 'up': {\n            let prevCell = tile.rowPos;\n            // -1 for the prev cell and -1 for the array iterator\n            let i = prevCell - 2 < 0 ? 0 : prevCell - 2;\n            for (i; i >= 0; i -= 1) {\n              if (currentCol[i].rowPos !== tile.rowPos && currentCol[i].isEmpty) {\n                prevCell = currentCol[i].rowPos;\n              } else {\n                break;\n              }\n            }\n            if (prevCell && prevCell !== tile.rowPos) {\n              // const prevTileIndex = prevCell - 2 < 0 ? 0 : prevCell - 2;\n              // const prevTile = state.find(({ rowPos, colPos }) => (\n              //   currentCol[prevTileIndex].rowPos === rowPos\n              //   && currentCol[prevTileIndex].colPos === colPos\n              // ));\n              //\n              // if (prevTile && prevTile.tileVal === tile.tileVal) console.log('EQUALS');\n\n              emptyFields = updateLocalEmpties(\n                emptyFields, tile, { rowPos: prevCell, colPos: tile.colPos },\n              );\n              return {\n                ...tile,\n                rowPos: prevCell,\n              };\n            }\n            return tile;\n          }\n          case 'down': {\n            const nextCell = currentCol.reduce((max, cell) => {\n              if (cell.isEmpty) return cell.rowPos < max ? max : cell.rowPos;\n              return max;\n            }, tile.rowPos);\n            if (nextCell && nextCell !== tile.rowPos) {\n              emptyFields = updateLocalEmpties(\n                emptyFields, tile, { rowPos: nextCell, colPos: tile.colPos },\n              );\n              return {\n                ...tile,\n                rowPos: nextCell,\n              };\n            }\n            return tile;\n          }\n          default:\n            return tile;\n        }\n      });\n\n      return updatedTiles;\n    }\n    default:\n      return state;\n  }\n};\n\n\nexport default tilesReducer;\n","// Game actions\nexport const INIT_GAME = 'INIT_GAME';\nexport const FINISH_GAME = 'FINISH_GAME';\n\n// Empties actions\nexport const UPDATE_EMPTIES = 'UPDATE_EMPTIES';\nexport const INIT_EMPTIES = 'INIT_EMPTIES';\n\n// Tiles actions\nexport const UPDATE_POSITION = 'UPDATE_POSITION';\nexport const REMOVE_NUMBER = 'REMOVE_NUMBER';\nexport const ADD_TILE = 'ADD_TILE';\nexport const INIT_FIRST_TILES = 'INIT_FIRST_TILES';\n\n// Score actions\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const CLEAR_CURRENT_SCORE = 'CLEAR_CURRENT_SCORE';\n","import { UPDATE_EMPTIES, INIT_EMPTIES } from '../actions';\nimport initialState from '../initialState';\n\nconst emptyFieldsReducer = (state = initialState.emptyFields, action) => {\n  switch (action.type) {\n    case UPDATE_EMPTIES: {\n      const tiles = action.payload;\n      const updatedEmpties = state.map((item) => {\n        const tile = tiles.find(({ rowPos, colPos }) => rowPos === item.rowPos && colPos === item.colPos);\n        if (tile) return { ...item, isEmpty: false };\n        return {\n          ...item,\n          isEmpty: true,\n        };\n      });\n      return updatedEmpties;\n    }\n    case INIT_EMPTIES:\n      return initialState.emptyFields;\n    default:\n      return state;\n  }\n};\n\nexport default emptyFieldsReducer;\n","import { UPDATE_SCORE, CLEAR_CURRENT_SCORE } from '../actions';\nimport initialState from '../initialState';\n\nconst scoreReducer = (state = initialState.score, action) => {\n  switch (action.type) {\n    case UPDATE_SCORE: {\n      let bestScoreValue = state.bestScore;\n      const currentScoreValue = state.currentScore + action.payload;\n      if (!bestScoreValue) {\n        bestScoreValue = action.payload;\n      } else {\n        bestScoreValue = Math.max(\n          currentScoreValue,\n          bestScoreValue,\n        );\n      }\n      return {\n        ...state,\n        currentScore: currentScoreValue,\n        bestScore: bestScoreValue,\n      };\n    }\n    case CLEAR_CURRENT_SCORE:\n      return {\n        ...state,\n        currentScore: initialState.score.currentScore,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default scoreReducer;\n","import { INIT_GAME, FINISH_GAME } from '../actions';\nimport initialState from '../initialState';\n\nconst emptyFieldsReducer = (state = initialState.gameStatus, action) => {\n  switch (action.type) {\n    case INIT_GAME:\n      return true;\n    case FINISH_GAME:\n      return false;\n    default:\n      return state;\n  }\n};\n\nexport default emptyFieldsReducer;\n","import { combineReducers } from 'redux';\nimport tilesReducer from './tilesReducer';\nimport emptyFieldsReducer from './emptyFieldsReducer';\nimport scoreReducer from './scoreReducer';\nimport gameReducer from './gameReducer';\n\nexport default combineReducers({\n  tiles: tilesReducer,\n  emptyFields: emptyFieldsReducer,\n  score: scoreReducer,\n  gameStatus: gameReducer,\n});\n","import React from 'react';\n\n// CSS\nimport './styles.css';\n\nconst Field = () => (\n  <div className=\"grid\">\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n    <div className=\"grid-cell\" />\n  </div>\n);\n\nexport default Field;\n","import { INIT_EMPTIES, UPDATE_EMPTIES } from '../actions';\n\nexport const initEmptiesAction = () => ({ type: INIT_EMPTIES });\nexport const updateEmptiesAction = (tiles) => ({ type: UPDATE_EMPTIES, payload: tiles });\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\nconst Tile = ({ tileVal, rowPos, colPos }) => <div className={`number number--${tileVal} pos--${rowPos}-${colPos}`}>{tileVal}</div>;\n\nTile.propTypes = {\n  tileVal: PropTypes.number.isRequired,\n  rowPos: PropTypes.number.isRequired,\n  colPos: PropTypes.number.isRequired,\n};\n\nexport default Tile;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\n// redux\nimport { connect } from 'react-redux';\nimport { addTileAction } from '../../Redux/actions/tilesActions';\n\n// Components\nimport Tile from '../Tile';\n\nconst TilesField = ({ tiles }) => (\n  <div className=\"grid numbers\">\n    { tiles.map((tile) => <Tile key={`${tile.rowPos}-${tile.colPos}`} rowPos={tile.rowPos} colPos={tile.colPos} tileVal={tile.tileVal} />) }\n  </div>\n);\n\nTilesField.propTypes = {\n  tiles: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.number)),\n};\n\nTilesField.defaultProps = {\n  tiles: [],\n};\n\nconst mapStateToProps = (state) => ({ tiles: state.tiles });\nconst mapDispatchToProps = (dispatch) => ({\n  addTile: (rowPos, colPos, tileVal) => dispatch(addTileAction(rowPos, colPos, tileVal)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TilesField);\n","import { ADD_TILE, INIT_FIRST_TILES, UPDATE_POSITION } from '../actions';\nimport { updateEmptiesAction } from './emptiesAction';\n\nexport const addTileAction = () => ({ type: ADD_TILE });\n\nexport const initTilesAction = () => ({\n  type: INIT_FIRST_TILES,\n});\n\nconst updateTilesPositionAction = (direction, emptyFields) => ({\n  type: UPDATE_POSITION,\n  payload: {\n    direction,\n    emptyFields,\n  },\n});\n\nexport const updateTilesPositionAThunk = (direction) => (dispatch, getState) => {\n  const { emptyFields } = getState();\n  dispatch(updateTilesPositionAction(direction, emptyFields));\n  const { tiles } = getState();\n  dispatch(updateEmptiesAction(tiles));\n\n  //const { emptyFields } = getState();\n  //dispatch(addTileAction(emptyFields));\n};\n","import { INIT_GAME, FINISH_GAME } from '../actions';\nimport { initTilesAction } from './tilesActions';\nimport { clearScoreAction } from './scoreActions';\nimport { updateEmptiesAction, initEmptiesAction } from './emptiesAction';\n\nconst initGameAction = () => ({ type: INIT_GAME });\n\nexport const initGameThunkAction = () => (dispatch, getState) => {\n  dispatch(initGameAction());\n  dispatch(clearScoreAction());\n  dispatch(initEmptiesAction());\n  dispatch(initTilesAction());\n  const { tiles } = getState();\n  dispatch(updateEmptiesAction(tiles));\n};\n\nexport const finishGame = () => ({ type: FINISH_GAME });\n","import { UPDATE_SCORE, CLEAR_CURRENT_SCORE } from '../actions';\n\nexport const updateScoreAction = (currentScore) => ({\n  type: UPDATE_SCORE,\n  payload: currentScore,\n});\n\nexport const clearScoreAction = () => ({\n  type: CLEAR_CURRENT_SCORE,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\n// redux\nimport { connect } from 'react-redux';\nimport { initGameThunkAction } from '../../Redux/actions/gameActions';\n\nconst StartButton = ({ initGame }) => <button type=\"button\" className=\"start-button\" onClick={initGame}>Start again</button>;\n\nStartButton.propTypes = {\n  initGame: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  initGame: () => dispatch(initGameThunkAction()),\n});\n\nexport default React.memo(connect(undefined, mapDispatchToProps)(StartButton));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\n// redux\nimport { connect } from 'react-redux';\n\nconst Score = ({ score, scoreType }) => {\n  const scoreLabel = scoreType === 'current' ? 'Your score' : 'Best score';\n  const scoreValue = scoreType === 'current' ? score.currentScore : score.bestScore;\n\n  return (\n    <div className=\"score\">\n      <span className=\"score__label\">{scoreLabel}</span>\n      <span className=\"score__value\">{scoreValue}</span>\n    </div>\n  );\n};\n\nScore.propTypes = {\n  score: PropTypes.objectOf(PropTypes.number).isRequired,\n  scoreType: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ score: state.score });\n\nexport default React.memo(connect(mapStateToProps)(Score));\n","import React, { useEffect } from 'react';\nimport { Swipeable } from 'react-swipeable';\nimport PropTypes from 'prop-types';\n\n// CSS\nimport './styles.css';\n\n// components\nimport { connect } from 'react-redux';\nimport Field from '../Field';\nimport TilesField from '../TilesField';\nimport StartButton from '../StartButton';\nimport Score from '../Score';\n\n// Actions\nimport { initGameThunkAction } from '../../Redux/actions/gameActions';\nimport { updateTilesPositionAThunk } from '../../Redux/actions/tilesActions';\n\n// const App = ({ /*tiles, updateTilePosition*/ }) => {\nconst App = ({ initGame, updateTilesPosition }) => {\n  const moveLeft = () => {\n    updateTilesPosition('left');\n  };\n\n  const moveRight = () => {\n    updateTilesPosition('right');\n  };\n\n  const moveUp = () => {\n    updateTilesPosition('up');\n  };\n\n  const moveDown = () => {\n    updateTilesPosition('down');\n  };\n\n  useEffect(() => {\n    initGame();\n\n    document.addEventListener('keydown', (e) => {\n      switch (e.keyCode) {\n        case 37:\n          moveLeft();\n          break;\n        case 38:\n          moveUp();\n          break;\n        case 39:\n          moveRight();\n          break;\n        case 40:\n          moveDown();\n          break;\n        default:\n      }\n    });\n  }, []);\n\n  return (\n    <Swipeable\n      onSwipedLeft={moveLeft}\n      onSwipedRight={moveRight}\n      onSwipedUp={moveUp}\n      onSwipedDown={moveDown}\n      className=\"wrap\"\n    >\n      <h1 className=\"game-header\">2048</h1>\n      <p className=\"game-description\">Use Up, Down, Left, Right keys or swipe to play</p>\n      <StartButton />\n      <div className=\"score-wrap\">\n        <Score scoreType=\"current\" />\n        <Score scoreType=\"best\" />\n      </div>\n      <div className=\"game__container\">\n        <Field />\n        <TilesField />\n      </div>\n    </Swipeable>\n  );\n};\n\nApp.propTypes = {\n  //tiles: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.number)).isRequired,\n  initGame: PropTypes.func.isRequired,\n  updateTilesPosition: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ tiles: state.tiles });\n\nconst mapDispatchToProps = (dispatch) => ({\n  initGame:\n    () => dispatch(initGameThunkAction()),\n  updateTilesPosition: (direction) => dispatch(updateTilesPositionAThunk(direction)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// CSS\nimport './css/variables.css';\nimport './css/common.css';\n\n// redux\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\n\n// redux-persist\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport reducer from './Redux/reducers';\n\nimport App from './Components/App';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nconst composeEnhancers = (\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n  && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ trace: true, traceLimit: 25 })\n) || compose;\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\nconst store = createStore(\n  persistedReducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware)),\n);\n\nconst persistor = persistStore(store);\n\npersistor.purge(); // CLEAR redux-persist cache\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor} loading={null}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}